create sequence scope_seq
  increment by 1
  start with 1;

create table if not exists scope_table
(
  id integer not null,
  name varchar(50) not null,
  constraint "scope_pk" primary key (id)
);
public
insert into scope_table values
  (nextval('scope_seq'), 'create_note'),
  (nextval('scope_seq'), 'read_note');

create sequence grant_type_seq
  increment by 1
  start with 1;

create table if not exists grant_type_table
(
  id integer not null,
  name varchar(20) not null,
  constraint "grant_type_pk" primary key (id)
);

insert into grant_type_table values
  (nextval('grant_type_seq'), 'password'),
  (nextval('grant_type_seq'), 'authorization_code'),
  (nextval('grant_type_seq'),'refresh_token');

create sequence authorities_seq
  increment by 1
  start with 1;

create table if not exists authorities_table
(
  id integer not null,
  name varchar(20) not null,
  constraint "authorities_pk" primary key (id)
);

insert into authorities_table values
  (nextval('authorities_seq'), 'ADMIN'),
  (nextval('authorities_seq'), 'STANDARD_USER'),
  (nextval('authorities_seq'), 'READ_OWNED'),
  (nextval('authorities_seq'), 'READ_OTHER');

create sequence passwords_seq
  increment by 1
  start with 1;

create table if not exists passwords_table
(
  id integer not null,
  hash varchar(100) not null,
  constraint "passwords_pk" primary key (id)
);

create sequence oauth_clients_seq
  increment by 1
  start with 1;

create table if not exists oauth_clients_table
(
  id integer not null,
  name varchar(30) not null,
  secret varchar(50) not null,
  access_token_validity integer,
  refresh_token_validity integer,
  constraint clients_pk primary key (id),
  constraint client_name_uni unique (name)
);

create table if not exists client_scope_table
(
  client_id integer not null,
  scope_id integer not null,
  constraint client_scope_pk primary key (client_id, scope_id),
  constraint client_fk foreign key (client_id) references oauth_clients_table(id),
  constraint scope_fk foreign key (scope_id) references scope_table(id)
);

create table if not exists client_grant_type_table
(
  client_id integer not null,
  grant_type_id integer not null,
  constraint client_grant_type_pk primary key (client_id, grant_type_id),
  constraint client_gt_fk foreign key (client_id) references oauth_clients_table(id),
  constraint grant_type_fk foreign key (grant_type_id) references grant_type_table(id)
);

create table if not exists client_authorities_table
(
  client_id integer not null,
  authorities_id integer not null,
  constraint client_authorities_pk primary key (client_id, authorities_id),
  constraint client_auth_fk foreign key (client_id) references oauth_clients_table(id),
  constraint authorities_fk foreign key (authorities_id) references authorities_table(id)
);

